import Data.Char (isDigit, ord)
import Data.List (find, permutations)
import GHC.Char ()

type CountryCode = String

type AmountOfChars = Int

type IbanStructure = (CountryCode, AmountOfChars)

ibanStructures :: [IbanStructure]
ibanStructures =
  [ ("AL", 28),
    ("AD", 24),
    ("AT", 20),
    ("AZ", 28),
    ("BH", 22),
    ("BY", 28),
    ("BE", 16),
    ("BA", 20),
    ("BR", 29),
    ("BG", 22),
    ("BI", 27),
    ("CR", 22),
    ("HR", 21),
    ("CY", 28),
    ("CZ", 24),
    ("DK", 18),
    ("DO", 28),
    ("EG", 29),
    ("SV", 28),
    ("EE", 20),
    ("FO", 18),
    ("FI", 18),
    ("FR", 27),
    ("GE", 22),
    ("DE", 22),
    ("GI", 23),
    ("GR", 27),
    ("GL", 18),
    ("GT", 28),
    ("VA", 22),
    ("HU", 28),
    ("IS", 26),
    ("IQ", 23),
    ("IE", 22),
    ("IL", 23),
    ("IT", 27),
    ("JO", 30),
    ("KZ", 20),
    ("XK", 20),
    ("KW", 30),
    ("LV", 21),
    ("LB", 28),
    ("LY", 25),
    ("LI", 21),
    ("LT", 20),
    ("LU", 20),
    ("MT", 31),
    ("MR", 27),
    ("MU", 30),
    ("MD", 24),
    ("MC", 27),
    ("ME", 22),
    ("NL", 18),
    ("MK", 19),
    ("NO", 15),
    ("PK", 24),
    ("PS", 29),
    ("PL", 28),
    ("PT", 25),
    ("QA", 29),
    ("RO", 24),
    ("LC", 32),
    ("SM", 27),
    ("ST", 25),
    ("SA", 24),
    ("RS", 22),
    ("SC", 31),
    ("SK", 24),
    ("SI", 19),
    ("ES", 24),
    ("SD", 18),
    ("SE", 24),
    ("CH", 21),
    ("TL", 23),
    ("TN", 24),
    ("TR", 26),
    ("UA", 29),
    ("AE", 23),
    ("GB", 22),
    ("VG", 24)
  ]

iban :: String -> Bool
iban s = correctLength s (findMatchingCountry s) && computeRemainder (convertToInteger $ replaceLetters $ rearrange s) == 1

correctLength :: String -> Maybe IbanStructure -> Bool
correctLength str tuple = case tuple of
  Just (cc, l) -> length str == l
  Nothing -> False

findMatchingCountry :: String -> Maybe (CountryCode, AmountOfChars)
findMatchingCountry [] = Nothing
findMatchingCountry [_] = Nothing
findMatchingCountry (x : y : xs) = find (\(cc, _) -> [x, y] == cc) ibanStructures

replaceLetters :: [Char] -> [Char]
replaceLetters [] = []
replaceLetters (x : xs)
  | isDigit x = x : replaceLetters xs
  | otherwise = show (ord x - 55) ++ replaceLetters xs

rearrange :: [Char] -> [Char]
rearrange [] = []
rearrange [a] = [a]
rearrange [a, b] = [a, b]
rearrange [a, b, c] = [a, b, c]
rearrange [a, b, c, d] = [a, b, c, d]
rearrange (a : b : c : d : xs) = xs ++ [a, b, c, d]

convertToInteger :: String -> Integer
convertToInteger s = read s :: Integer

computeRemainder :: Integer -> Integer
computeRemainder n = n `mod` 97

validIbans :: [String]
validIbans =
  [ "AL35202111090000000001234567",
    "AD1400080001001234567890",
    "AT483200000012345864",
    "AZ77VTBA00000000001234567890",
    "BH02CITI00001077181611",
    "BY86AKBB10100000002966000000",
    "BE71096123456769",
    "BA393385804800211234",
    "BR1500000000000010932840814P2",
    "BG18RZBB91550123456789",
    "BI4210000100010000332045181",
    "CR23015108410026012345",
    "HR1723600001101234565",
    "CY21002001950000357001234567",
    "CZ5508000000001234567899",
    "DK9520000123456789",
    "DO22ACAU00000000000123456789",
    "EG800002000156789012345180002",
    "SV43ACAT00000000000000123123",
    "EE471000001020145685",
    "FO9264600123456789",
    "FI1410093000123458",
    "FR7630006000011234567890189",
    "GE60NB0000000123456789",
    "DE75512108001245126199",
    "GI56XAPO000001234567890",
    "GR9608100010000001234567890",
    "GL8964710123456789",
    "GT20AGRO00000000001234567890",
    "VA59001123000012345678",
    "HU93116000060000000012345676",
    "IS750001121234563108962099",
    "IQ20CBIQ861800101010500",
    "IE64IRCE92050112345678",
    "IL170108000000012612345",
    "IT60X0542811101000000123456",
    "JO71CBJO0000000000001234567890",
    "KZ244350000012344567",
    "XK051212012345678906",
    "KW81CBKU0000000000001234560101",
    "LV97HABA0012345678910",
    "LB92000700000000123123456123",
    "LY38021001000000123456789",
    "LI7408806123456789012",
    "LT601010012345678901",
    "LU120010001234567891",
    "MT31MALT01100000000000000000123",
    "MR1300020001010000123456753",
    "MU43BOMM0101123456789101000MUR",
    "MD21EX000000000001234567",
    "MC5810096180790123456789085",
    "ME25505000012345678951",
    "NL02ABNA0123456789",
    "MK07200002785123453",
    "NO8330001234567",
    "PK36SCBL0000001123456702",
    "PS92PALS000000000400123456702",
    "PL10105000997603123456789123",
    "PT50002700000001234567833",
    "QA54QNBA000000000000693123456",
    "RO66BACX0000001234567890",
    "LC14BOSL123456789012345678901234",
    "SM76P0854009812123456789123",
    "ST23000200000289355710148",
    "SA4420000001234567891234",
    "RS35105008123123123173",
    "SC74MCBL01031234567890123456USD",
    "SK8975000000000012345671",
    "SI56192001234567892",
    "ES7921000813610123456789",
    "SD8811123456789012",
    "SE7280000810340009783242",
    "CH5604835012345678009",
    "TL380010012345678910106",
    "TN5904018104004942712345",
    "TR320010009999901234567890",
    "UA903052992990004149123456789",
    "AE460090000000123456789",
    "GB33BUKB20201555555555",
    "VG07ABVI0000000123456789"
  ]

invalidIbans :: [String]
invalidIbans =
  [ 
    "AL35202109110000000001234567",
    "AD1400080100001234567890",
    "AT483200000012345864",
    "AZ77VTBA00000000001234567890",
    "BH02CITI00001077181611",
    "BY86AKBB10100000002966000000",
    "BE71096145236769",
    "BA393385488000211234",
    "BR1500000000000010932840814P2",
    "BG18RZBB55910123456789",
    "BI4210000001010000332045181",
    "CR23015141080026012345",
    "HR1723600100101234565",
    "CY21002095010000357001234567",
    "CZ5508000000001234567899",
    "DK9520002301456789",
    "DO22ACAU00000000000123456789",
    "EG800002010056789012345180002",
    "SV43ACAT00000000000000123123",
    "EE471000100020145685",
    "FO9264602301456789",
    "FI1410090030123458",
    "FR7630000060011234567890189",
    "GE60NB0000000123456789",
    "DE75512100081245126199",
    "GI56XAPO000001234567890",
    "GR9608101000000001234567890",
    "GL8964712301456789",
    "GT20AGRO00000000001234567890",
    "VA59001100230012345678",
    "HU93116006000000000012345676",
    "IS750001121234563108962099",
    "IQ20CBIQ188600101010500",
    "IE64IRCE05920112345678",
    "IL170108000000012612345",
    "IT60X0541128101000000123456",
    "JO71CBJO0000000000001234567890",
    "KZ244350000012344567",
    "XK051212230145678906",
    "KW81CBKU0000000000001234560101",
    "LV97HABA1200345678910",
    "LB92000700000000123123456123",
    "LY38021000010000123456789",
    "LI7408802361456789012",
    "LT601010230145678901",
    "LU120010120034567891",
    "MT31MALT10010000000000000000123",
    "MR1300020100010000123456753",
    "MU43BOMM0101123456789101000MUR",
    "MD21EX000000000001234567",
    "MC5810098061790123456789085",
    "ME25505001002345678951",
    "NL02ABNA2301456789",
    "MK07200078025123453",
    "NO8330003412567",
    "PK36SCBL0000001123456702",
    "PS92PALS000000000400123456702",
    "PL10105099007603123456789123",
    "PT50002700000001234567833",
    "QA54QNBA000000000000693123456",
    "RO66BACX0000001234567890",
    "LC14BOSL341256789012345678901234",
    "SM76P0850940812123456789123",
    "ST23000200000289355710148",
    "SA4420000100234567891234",
    "RS35105012083123123173",
    "SC74MCBL03011234567890123456USD",
    "SK8975000000000012345671",
    "SI56192023014567892",
    "ES7921001308610123456789",
    "SD8811125634789012",
    "SE7280001008340009783242",
    "CH5604831250345678009",
    "TL380010230145678910106",
    "TN5904010481004942712345",
    "TR320010990099901234567890",
    "UA903052299990004149123456789",
    "AE460090000000123456789",
    "GB33BUKB20201555555555",
    "VG07ABVI0000000123456789"
  ]

forall :: [a] -> (a -> Bool) -> Bool
forall = flip all

main :: IO ()
main = do
  putStrLn "\bExercise 7\nTime spent +/- 90 minutes\n"

  putStrLn $ "Testing correct IBAN numbers of all countries: " ++ show (forall validIbans iban)
  putStrLn $ "Testing by incorrect IBAN numbers of all countries: " ++ show (not $ forall invalidIbans iban)
  
  putStrLn "\nWe weren't able to automate the process of testing by incorrect exmaples due to time constraints\n\ 
  \the implementation of this would work as follows:\n\
  \1. Take the list of valid IBAN\n\
  \2. For every IBAN, make a small variation by swapping a few characters\n\
  \3. Testing the generated variations with the 'iban' function assuming every call should return False"
